{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "Account service AWS CloudFormation template that contains 4 AWS Lambda functions behind an API Gateway",

  "Parameters": {
    "S3Bucket": {
      "Description": "The name of the S3 bucket that contains the source code of the Lambda function",
      "Type": "String",
      "Default": "sam-microservice-app-demo"
    },

    "S3Key": {
      "Description": "The location and name of the source code .jar file",
      "Type": "String",
      "Default": "target/accountservice-1.0.jar"
    }
  },

  "Resources": {
    "AccountTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        },
        "TableName": "account",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          },
          {
            "AttributeName": "status",
            "AttributeType": "S"
          },
          {
            "AttributeName": "balance",
            "AttributeType": "N"
          },
          {
            "AttributeName": "customerId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "customerId-index",
            "KeySchema": [
              {
                "AttributeName": "customerId",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            },
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            }
          }
        ]
      }
    },

    "GetAccountLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {"Ref": "S3Bucket"},
          "S3Key": {"Ref": "S3Key"}
        },
        "Description": "Returns an account object of specified id",
        "Handler": "com.example.accountservice.lambda.GetAccount::handleRequest",
        "MemorySize": 128,
        "Role": {"Fn::GetAtt": ["AccountServiceRole", "Arn"]},
        "Runtime": "java8",
        "Timeout": 3
      }
    },

    "GetAccountLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {"Fn::GetAtt": ["GetAccountLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {"Fn::Join": ["", ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "AccountServiceRestApi"}, "/*"]]}
      }
    },

    "GetAccountsLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {"Ref": "S3Bucket"},
          "S3Key": {"Ref": "S3Key"}
        },
        "Description": "Returns limited array of account objects",
        "Handler": "com.example.accountservice.lambda.GetAccounts::handleRequest",
        "MemorySize": 128,
        "Role": {"Fn::GetAtt": ["AccountServiceRole", "Arn"]},
        "Runtime": "java8",
        "Timeout": 3
      }
    },

    "GetAccountsLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {"Fn::GetAtt": ["GetAccountsLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {"Fn::Join": ["", ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "AccountServiceRestApi"}, "/*"]]}
      }
    },

    "GetAccountsByCustomerIdLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {"Ref": "S3Bucket"},
          "S3Key": {"Ref": "S3Key"}
        },
        "Description": "Returns array of customer's accounts by customerId",
        "Handler": "com.example.accountservice.lambda.GetAccountsByCustomerId::handleRequest",
        "MemorySize": 128,
        "Role": {"Fn::GetAtt": ["AccountServiceRole", "Arn"]},
        "Runtime": "java8",
        "Timeout": 3
      }
    },

    "GetAccountsByCustomerIdLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {"Fn::GetAtt": ["GetAccountsByCustomerIdLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {"Fn::Join": ["", ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "AccountServiceRestApi"}, "/*"]]}
      }
    },

    "PostAccountLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {"Ref": "S3Bucket"},
          "S3Key": {"Ref": "S3Key"}
        },
        "Description": "Saves new account object to db and returns newly saved object",
        "Handler": "com.example.accountservice.lambda.PostAccount::handleRequest",
        "MemorySize": 128,
        "Role": {"Fn::GetAtt": ["AccountServiceRole", "Arn"]},
        "Runtime": "java8",
        "Timeout": 3
      }
    },

    "PostAccountLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {"Fn::GetAtt": ["PostAccountLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {"Fn::Join": ["", ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "AccountServiceRestApi"}, "/*"]]}
      }
    },

    "AccountServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": "lambda.amazonaws.com"
            },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "AccountServiceLog",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": ["logs:*"],
              "Resource": "arn:aws:logs:*:*:*"
            }]
          }
        }, {
          "PolicyName": "AccountServiceExecute",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "dynamodb:Scan",
                "dynamodb:PutItem",
                "dynamodb:GetItem",
                "dynamodb:DeleteItem",
                "dynamodb:Query",
                "dynamodb:UpdateItem"
              ],
              "Resource": [
                {"Fn::Join" : ["", ["arn:aws:dynamodb:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":table/account*"]]}
              ]
            }]
          }
        }]
      }
    },

    "AccountServiceRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "API Gateway for Account service",
        "EndpointConfiguration": {
          "Types": ["REGIONAL"]
        },
        "FailOnWarnings": true
      }
    },

    "AccountModel": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "ContentType": "application/json",
        "Name": "Account",
        "RestApiId": {"Ref": "AccountServiceRestApi"},
        "Schema": {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "title": "Account",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "balance": {
              "type": "integer"
            },
            "customerId": {
              "type": "string"
            }
          },
          "required": ["id", "status", "balance", "customerId"]
        }
      }
    },

    "AccountsModel": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "ContentType": "application/json",
        "Name": "Accounts",
        "RestApiId": {"Ref": "AccountServiceRestApi"},
        "Schema": {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "title": "Accounts",
          "type": "array",
          "items": {
            "$ref": {"Fn::Join": ["", ["https://apigateway.amazonaws.com/restapis/", {"Ref": "AccountServiceRestApi"}, "/models/", {"Ref": "AccountModel"}]]}
          }
        }
      }
    },

    "CreateAccountModel": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "ContentType": "application/json",
        "Name": "CreateAccount",
        "RestApiId": {"Ref": "AccountServiceRestApi"},
        "Schema": {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "title": "CreateAccount",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "balance": {
              "type": "integer"
            },
            "customerId": {
              "type": "string"
            }
          },
          "required": ["balance", "customerId"]
        }
      }
    },

    "AccountsRestResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {"Ref": "AccountServiceRestApi"},
        "ParentId": {"Fn::GetAtt": ["AccountServiceRestApi", "RootResourceId"]},
        "PathPart": "account"
      }
    },

    "AccountsGetMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {"Ref": "AccountServiceRestApi"},
        "ResourceId": {"Ref": "AccountsRestResource"},
        "HttpMethod": "GET",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {"Fn::Join" : ["", ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["GetAccountsLambda", "Arn"]}, "/invocations"]]},
          "IntegrationResponses": [{
            "ResponseTemplates": {
              "application/json": "$input.json('$.body')"
            },
            "ResponseParameters": {
              "method.response.header.Link": "integration.response.body.headers.next"
            },
            "StatusCode": 200
          }],
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "{\"parameters\": {\"limit\": \"$input.params('limit')\", \"next\": \"$input.params('next')\"}}"
          }
        },
        "RequestParameters": {
          "method.request.querystring.limit": false,
          "method.request.querystring.next": false
        },
        "MethodResponses": [{
          "ResponseModels": {
            "application/json": {"Ref": "AccountsModel"}
          },
          "ResponseParameters": {
            "method.response.header.Link": true
          },
          "StatusCode": 200
        }]
      }
    },

    "AccountPostMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {"Ref": "AccountServiceRestApi"},
        "ResourceId": {"Ref": "AccountsRestResource"},
        "HttpMethod": "POST",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {"Fn::Join" : ["", ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["PostAccountLambda", "Arn"]}, "/invocations"]]},
          "IntegrationResponses": [{
            "ResponseTemplates": {
              "application/json": "{}"
            },
            "ResponseParameters": {
              "method.response.header.Location": "integration.response.body.headers.id"
            },
            "StatusCode": 201
          }],
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "{\"body\": $input.json('$')}"
          }
        },
        "RequestModels": {
          "application/json": {"Ref": "CreateAccountModel"}
        },
        "MethodResponses": [{
          "ResponseModels": {
            "application/json": "Empty"
          },
          "ResponseParameters": {
            "method.response.header.Location": true
          },
          "StatusCode": 201
        }]
      }
    },

    "AccountRestResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {"Ref": "AccountServiceRestApi"},
        "ParentId": {"Ref": "AccountsRestResource"},
        "PathPart": "{accountId}"
      }
    },

    "AccountGetMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {"Ref": "AccountServiceRestApi"},
        "ResourceId": {"Ref": "AccountRestResource"},
        "HttpMethod": "GET",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {"Fn::Join" : ["", ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["GetAccountLambda", "Arn"]}, "/invocations"]]},
          "IntegrationResponses": [{
            "ResponseTemplates": {
              "application/json": "$input.json('$.body')"
            },
            "StatusCode": 200
          }, {
            "SelectionPattern": "^not found.*",
            "ResponseTemplates": {
              "application/json": "{}"
            },
            "StatusCode": 404
          }],
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "{\"id\": \"$input.params('accountId')\"}"
          }
        },
        "RequestParameters": {
          "method.request.path.accountId": true
        },
        "MethodResponses": [{
          "ResponseModels": {
            "application/json": {"Ref": "AccountModel"}
          },
          "StatusCode": 200
        }, {
          "ResponseModels": {
            "application/json": "Empty"
          },
          "StatusCode": 404
        }]
      }
    },

    "AccountServiceRestApiDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {"Ref": "AccountServiceRestApi"},
        "StageName": "prod"
      },
      "DependsOn": ["AccountGetMethod", "AccountsGetMethod", "AccountPostMethod"]
    }
  },

  "Outputs": {
    "RootUrl": {
      "Description": "Root URL of the Account service API gateway",
      "Value": {"Fn::Join": ["", ["https://", {"Ref": "AccountServiceRestApi"}, ".execute-api.", {"Ref": "AWS::Region"}, ".amazonaws.com"]]}
    }
  }
}
