{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "Account service AWS CloudFormation template that contains 4 AWS Lambda functions behind an API Gateway",

  "Parameters": {
    "S3Bucket": {
      "Description": "The name of the S3 bucket that contains the source code of the Lambda function",
      "Type": "String",
      "Default": "sam-microservice-app-demo"
    },

    "S3Key": {
      "Description": "The location and name of the source code .jar file",
      "Type": "String",
      "Default": "target/accountservice-1.0.jar"
    }
  },

  "Resources": {
    "AccountTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "account",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          },
          {
            "AttributeName": "customerId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": "5",
          "WriteCapacityUnits": "5"
        },
        "GlobalSecondaryIndexes": [{
          "IndexName": "customerId-index",
          "KeySchema": [{
            "AttributeName": "customerId",
            "KeyType": "HASH"
          }],
          "Projection": {
            "ProjectionType": "ALL"
          },
          "ProvisionedThroughput": {
            "ReadCapacityUnits": "5",
            "WriteCapacityUnits": "5"
          }
        }]
      }
    },

    "GetAccountLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "GetAccountFunction",
        "Code": {
          "S3Bucket": {"Ref": "S3Bucket"},
          "S3Key": {"Ref": "S3Key"}
        },
        "Description": "Returns an account object of specified id",
        "Handler": "com.example.accountservice.lambda.GetAccount::handleRequest",
        "MemorySize": 256,
        "Role": {"Fn::GetAtt": ["AccountServiceRole", "Arn"]},
        "Runtime": "java8",
        "Timeout": 15
      }
    },

    "GetAccountLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {"Fn::GetAtt": ["GetAccountLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {"Fn::Join": ["", ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "AccountServiceRestApi"}, "/*"]]}
      }
    },

    "GetAccountsLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "GetAccountsFunction",
        "Code": {
          "S3Bucket": {"Ref": "S3Bucket"},
          "S3Key": {"Ref": "S3Key"}
        },
        "Description": "Returns limited array of account objects",
        "Handler": "com.example.accountservice.lambda.GetAccounts::handleRequest",
        "MemorySize": 256,
        "Role": {"Fn::GetAtt": ["AccountServiceRole", "Arn"]},
        "Runtime": "java8",
        "Timeout": 15
      }
    },

    "GetAccountsLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {"Fn::GetAtt": ["GetAccountsLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {"Fn::Join": ["", ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "AccountServiceRestApi"}, "/*"]]}
      }
    },

    "GetAccountsByCustomerIdLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "GetAccountsByCustomerIdFunction",
        "Code": {
          "S3Bucket": {"Ref": "S3Bucket"},
          "S3Key": {"Ref": "S3Key"}
        },
        "Description": "Returns array of customer's accounts by customerId",
        "Handler": "com.example.accountservice.lambda.GetAccountsByCustomerId::handleRequest",
        "MemorySize": 256,
        "Role": {"Fn::GetAtt": ["AccountServiceRole", "Arn"]},
        "Runtime": "java8",
        "Timeout": 15
      }
    },

    "GetAccountsByCustomerIdLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {"Fn::GetAtt": ["GetAccountsByCustomerIdLambda", "Arn"]},
        "Principal": "lambda.amazonaws.com",
        "SourceArn": {"Fn::Join": ["", ["arn:aws:lambda:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":function:*"]]}
      }
    },

    "UpdateAccountLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "UpdateAccountFunction",
        "Code": {
          "S3Bucket": {"Ref": "S3Bucket"},
          "S3Key": {"Ref": "S3Key"}
        },
        "Description": "Updates existed account and returns saved object",
        "Handler": "com.example.accountservice.lambda.UpdateAccount::handleRequest",
        "MemorySize": 256,
        "Role": {"Fn::GetAtt": ["AccountServiceRole", "Arn"]},
        "Runtime": "java8",
        "Timeout": 15
      }
    },

    "UpdateAccountLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {"Fn::GetAtt": [
          "UpdateAccountLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {"Fn::Join": ["", ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "AccountServiceRestApi"}, "/*"]]}
      }
    },

    "GenerateAccountLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "GenerateAccountFunction",
        "Code": {
          "S3Bucket": {"Ref": "S3Bucket"},
          "S3Key": {"Ref": "S3Key"}
        },
        "Description": "Generates stub account for newly created customer",
        "Handler": "com.example.accountservice.lambda.GenerateAccount::handleRequest",
        "MemorySize": 256,
        "Role": {"Fn::GetAtt": ["AccountServiceRole", "Arn"]},
        "Runtime": "java8",
        "Timeout": 15
      }
    },

    "GenerateAccountLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {"Fn::GetAtt": ["GenerateAccountLambda", "Arn"]},
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Ref": "NewCustomerTopic"
        }
      }
    },

    "NewCustomerTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "DisplayName" : "new-customer",
        "TopicName": "new-customer"
      }
    },

    "NewCustomerTopicSubscription": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "Endpoint": {"Fn::GetAtt": ["GenerateAccountLambda", "Arn"]},
        "Protocol": "lambda",
        "TopicArn": {"Ref": "NewCustomerTopic"}
      }
    },

    "ProcessOrderLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "ProcessOrderFunction",
        "Code": {
          "S3Bucket": {"Ref": "S3Bucket"},
          "S3Key": {"Ref": "S3Key"}
        },
        "Description": "Processes newly created order and publishes close-order event to sns topic",
        "Handler": "com.example.accountservice.lambda.ProcessOrder::handleRequest",
        "MemorySize": 256,
        "Role": {"Fn::GetAtt": ["AccountServiceRole", "Arn"]},
        "Runtime": "java8",
        "Timeout": 15
      }
    },

    "ProcessOrderLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {"Fn::GetAtt": ["ProcessOrderLambda", "Arn"]},
        "Principal": "sns.amazonaws.com",
        "SourceArn": {"Ref": "NewOrderTopic"}
      }
    },

    "NewOrderTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "DisplayName" : "new-order",
        "TopicName": "new-order"
      }
    },

    "NewOrderTopicSubscription": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "Endpoint": {"Fn::GetAtt": ["ProcessOrderLambda", "Arn"]},
        "Protocol": "lambda",
        "TopicArn": {"Ref": "NewOrderTopic"}
      }
    },

    "AccountServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": ["lambda.amazonaws.com"]
            },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "AccountServiceExecute",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "dynamodb:Scan",
                "dynamodb:PutItem",
                "dynamodb:GetItem",
                "dynamodb:DeleteItem",
                "dynamodb:Query",
                "dynamodb:UpdateItem",
                "dynamodb:BatchGetItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:DescribeStream",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:ListStreams",
                "cloudwatch:DeleteAlarms",
                "cloudwatch:DescribeAlarmHistory",
                "cloudwatch:DescribeAlarms",
                "cloudwatch:DescribeAlarmsForMetric",
                "cloudwatch:GetMetricStatistics",
                "cloudwatch:ListMetrics",
                "cloudwatch:PutMetricAlarm",
                "datapipeline:ActivatePipeline",
                "datapipeline:CreatePipeline",
                "datapipeline:DeletePipeline",
                "datapipeline:DescribeObjects",
                "datapipeline:DescribePipelines",
                "datapipeline:GetPipelineDefinition",
                "datapipeline:ListPipelines",
                "datapipeline:PutPipelineDefinition",
                "datapipeline:QueryObjects",
                "iam:GetRole",
                "iam:ListRoles",
                "lambda:CreateFunction",
                "lambda:ListFunctions",
                "lambda:ListEventSourceMappings",
                "lambda:CreateEventSourceMapping",
                "lambda:DeleteEventSourceMapping",
                "lambda:GetFunctionConfiguration",
                "lambda:DeleteFunction",
                "lambda:InvokeAsync",
                "lambda:InvokeFunction",
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:DescribeLogGroups",
                "logs:DescribeLogStreams",
                "logs:PutLogEvents",
                "logs:GetLogEvents",
                "logs:FilterLogEvents",
                "sns:CreateTopic",
                "sns:DeleteTopic",
                "sns:Publish",
                "sns:Subscribe",
                "sns:ListTopics",
                "sns:ListSubscriptionsByTopic",
                "sns:GetTopicAttributes",
                "sns:SetTopicAttributes"
              ],
              "Resource": "*"
            }]
          }
        }]
      }
    },

    "AccountServiceRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "Account service REST API",
        "Description": "Account service REST API used for /account* requests",
        "EndpointConfiguration": {
          "Types": ["REGIONAL"]
        },
        "FailOnWarnings": true
      }
    },

    "AccountServiceRestApiGatewayAccount": {
      "Type": "AWS::ApiGateway::Account",
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "AccountServiceRestApiGatewayRole",
            "Arn"
          ]
        }
      }
    },

    "AccountServiceRestApiGatewayRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": ["apigateway.amazonaws.com"]
              },
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "Policies": [{
          "PolicyName": "AccountServiceRestApiGatewayCloudWatchLogsPolicy",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "logs:*"
              ],
              "Resource": "arn:aws:logs:*:*:*"
            }]
          }
        }]
      }
    },

    "AccountServiceRestApiStage": {
      "DependsOn": ["AccountServiceRestApiGatewayAccount"],
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {
          "Ref": "AccountServiceRestApiDeployment"
        },
        "MethodSettings": [{
          "ResourcePath": "/*"
        }],
        "RestApiId": {
          "Ref": "AccountServiceRestApi"
        },
        "StageName": "api"
      }
    },

    "AccountServiceRestApiDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {"Ref": "AccountServiceRestApi"},
        "StageName": "default"
      },
      "DependsOn": ["AccountGetMethod", "AccountsGetMethod", "AccountPutMethod"]
    },

    "AccountModel": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "ContentType": "application/json",
        "Name": "Account",
        "RestApiId": {"Ref": "AccountServiceRestApi"},
        "Schema": {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "title": "Account",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "balance": {
              "type": "integer"
            },
            "customerId": {
              "type": "string"
            }
          },
          "required": ["id", "status", "balance", "customerId"]
        }
      }
    },

    "AccountsModel": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "ContentType": "application/json",
        "Name": "Accounts",
        "RestApiId": {"Ref": "AccountServiceRestApi"},
        "Schema": {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "title": "Accounts",
          "type": "array",
          "items": {
            "$ref": {"Fn::Join": ["", ["https://apigateway.amazonaws.com/restapis/", {"Ref": "AccountServiceRestApi"}, "/models/", {"Ref": "AccountModel"}]]}
          }
        }
      }
    },

    "UpdateAccountModel": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "ContentType": "application/json",
        "Name": "UpdateAccount",
        "RestApiId": {"Ref": "AccountServiceRestApi"},
        "Schema": {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "title": "UpdateAccount",
          "type": "object",
          "additionalProperties": true,
          "properties": {
            "status": {
              "type": "string"
            },
            "balance": {
              "type": "integer"
            }
          },
          "required": ["status", "balance"]
        }
      }
    },

    "AccountsRestResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {"Ref": "AccountServiceRestApi"},
        "ParentId": {"Fn::GetAtt": ["AccountServiceRestApi", "RootResourceId"]},
        "PathPart": "account"
      }
    },

    "AccountsGetMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {"Ref": "AccountServiceRestApi"},
        "ResourceId": {"Ref": "AccountsRestResource"},
        "HttpMethod": "GET",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {"Fn::Join" : ["", ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["GetAccountsLambda", "Arn"]}, "/invocations"]]},
          "IntegrationResponses": [{
            "StatusCode": 200
          }]
        },
        "RequestModels": {
          "application/json": "Empty"
        },
        "MethodResponses": [{
          "ResponseModels": {
            "application/json": {"Ref": "AccountsModel"}
          },
          "StatusCode": 200
        }]
      }
    },

    "AccountRestResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {"Ref": "AccountServiceRestApi"},
        "ParentId": {"Ref": "AccountsRestResource"},
        "PathPart": "{accountId}"
      }
    },

    "AccountGetMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {"Ref": "AccountServiceRestApi"},
        "ResourceId": {"Ref": "AccountRestResource"},
        "HttpMethod": "GET",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {"Fn::Join" : ["", ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["GetAccountLambda", "Arn"]}, "/invocations"]]},
          "IntegrationResponses": [
            {
              "StatusCode": 200
            },
            {
              "SelectionPattern": "^.*Exception.*$",
              "ResponseTemplates": {
                "application/json": "Empty"
              },
              "StatusCode": 404
            }
          ],
          "RequestTemplates": {
            "application/json": "{\"id\": \"$input.params('accountId')\"}"
          }
        },
        "RequestParameters": {
          "method.request.path.accountId": true
        },
        "RequestModels": {
          "application/json": "Empty"
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": {"Ref": "AccountModel"}
            },
            "StatusCode": 200
          },
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "StatusCode": 404
          }
        ]
      }
    },

    "AccountPutMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {"Ref": "AccountServiceRestApi"},
        "ResourceId": {"Ref": "AccountRestResource"},
        "HttpMethod": "PUT",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {"Fn::Join" : ["", ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["UpdateAccountLambda", "Arn"]}, "/invocations"]]},
          "IntegrationResponses": [
            {
              "StatusCode": 200
            },
            {
              "SelectionPattern": "^.*Exception.*$",
              "ResponseTemplates": {
                "application/json": "{\"message\":\"Oops, something went wrong when processing your request. Try later\"}"
              },
              "StatusCode": 400
            }
          ],
          "RequestTemplates": {
            "application/json": "{\"id\": \"$input.params('accountId')\", \"balance\": $input.json('$.balance'), \"status\": $input.json('$.status')}"
          }
        },
        "RequestModels": {
          "application/json": {"Ref": "UpdateAccountModel"}
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": {"Ref": "AccountModel"}
            },
            "StatusCode": 200
          },
          {
            "ResponseModels": {
              "application/json": "Error"
            },
            "StatusCode": 400
          }
        ]
      }
    }
  },

  "Outputs": {
    "RootUrl": {
      "Description": "Root URL of the Account service API gateway",
      "Value": {"Fn::Join": ["", ["https://", {"Ref": "AccountServiceRestApi"}, ".execute-api.", {"Ref": "AWS::Region"}, ".amazonaws.com/", {"Ref": "AccountServiceRestApiStage"}]]}
    }
  }
}
