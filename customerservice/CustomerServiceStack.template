{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "Customer service AWS CloudFormation template that contains 3 AWS Lambda functions behind an API Gateway",

  "Parameters": {
    "S3Bucket": {
      "Description": "The name of the S3 bucket that contains the source code of the Lambda function",
      "Type": "String",
      "Default": "sam-microservice-app-demo"
    },

    "S3Key": {
      "Description": "The location and name of the source code .jar file",
      "Type": "String",
      "Default": "target/customerservice-1.0.jar"
    }
  },

  "Resources": {
    "CustomerTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "customer",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "StreamSpecification": {
          "StreamViewType" : "NEW_IMAGE"
        },
        "ProvisionedThroughput": {
          "ReadCapacityUnits": "5",
          "WriteCapacityUnits": "5"
        }
      }
    },

    "GetCustomerLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "GetCustomerFunction",
        "Code": {
          "S3Bucket": {"Ref": "S3Bucket"},
          "S3Key": {"Ref": "S3Key"}
        },
        "Description": "Returns an customer object of specified id",
        "Handler": "com.example.customerservice.lambda.GetCustomer::handleRequest",
        "MemorySize": 256,
        "Role": {"Fn::GetAtt": ["CustomerServiceRole", "Arn"]},
        "Runtime": "java8",
        "Timeout": 15
      }
    },

    "GetCustomerLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {"Fn::GetAtt": ["GetCustomerLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {"Fn::Join": ["", ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "CustomerServiceRestApi"}, "/*"]]}
      }
    },

    "GetCustomersLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "GetCustomersFunction",
        "Code": {
          "S3Bucket": {"Ref": "S3Bucket"},
          "S3Key": {"Ref": "S3Key"}
        },
        "Description": "Returns limited array of customer objects",
        "Handler": "com.example.customerservice.lambda.GetCustomers::handleRequest",
        "MemorySize": 256,
        "Role": {"Fn::GetAtt": ["CustomerServiceRole", "Arn"]},
        "Runtime": "java8",
        "Timeout": 15
      }
    },

    "GetCustomersLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {"Fn::GetAtt": ["GetCustomersLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {"Fn::Join": ["", ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "CustomerServiceRestApi"}, "/*"]]}
      }
    },

    "PostCustomerLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "PostCustomerFunction",
        "Code": {
          "S3Bucket": {"Ref": "S3Bucket"},
          "S3Key": {"Ref": "S3Key"}
        },
        "Description": "Saves new customer object to db and returns newly saved object",
        "Handler": "com.example.customerservice.lambda.PostCustomer::handleRequest",
        "MemorySize": 256,
        "Role": {"Fn::GetAtt": ["CustomerServiceRole", "Arn"]},
        "Runtime": "java8",
        "Timeout": 15
      }
    },

    "PostCustomerLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {"Fn::GetAtt": ["PostCustomerLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {"Fn::Join": ["", ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "CustomerServiceRestApi"}, "/*"]]}
      }
    },

    "CustomerPublisherLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "CustomerPublisherFunction",
        "Code": {
          "S3Bucket": {"Ref": "S3Bucket"},
          "S3Key": {"Ref": "S3Key"}
        },
        "Description": "Publishes to sns topic customer object which was saved to db",
        "Handler": "com.example.customerservice.lambda.CustomerPublisher::handleRequest",
        "MemorySize": 256,
        "Role": {"Fn::GetAtt": ["CustomerServiceRole", "Arn"]},
        "Runtime": "java8",
        "Timeout": 15
      }
    },

    "NewCustomerEventSourceMapping": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "Properties": {
        "BatchSize" : 100,
        "Enabled" : true,
        "EventSourceArn" : {"Fn::GetAtt": ["CustomerTable", "StreamArn"]},
        "FunctionName" : { "Fn::GetAtt" : ["CustomerPublisherLambda", "Arn"] },
        "StartingPosition" : "LATEST"
      }
    },

    "CustomerPublisherLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {"Fn::GetAtt": ["CustomerPublisherLambda", "Arn"]},
        "Principal": "dynamodb.amazonaws.com",
        "SourceArn": {"Fn::Join": ["", ["arn:aws:dynamodb:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "CustomerTable"}, "/*"]]}
      }
    },

    "CustomerServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": ["lambda.amazonaws.com"]
            },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "CustomerServiceExecute",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "dynamodb:Scan",
                "dynamodb:PutItem",
                "dynamodb:GetItem",
                "dynamodb:DeleteItem",
                "dynamodb:Query",
                "dynamodb:UpdateItem",
                "dynamodb:BatchGetItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:DescribeStream",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:ListStreams",
                "cloudwatch:DeleteAlarms",
                "cloudwatch:DescribeAlarmHistory",
                "cloudwatch:DescribeAlarms",
                "cloudwatch:DescribeAlarmsForMetric",
                "cloudwatch:GetMetricStatistics",
                "cloudwatch:ListMetrics",
                "cloudwatch:PutMetricAlarm",
                "datapipeline:ActivatePipeline",
                "datapipeline:CreatePipeline",
                "datapipeline:DeletePipeline",
                "datapipeline:DescribeObjects",
                "datapipeline:DescribePipelines",
                "datapipeline:GetPipelineDefinition",
                "datapipeline:ListPipelines",
                "datapipeline:PutPipelineDefinition",
                "datapipeline:QueryObjects",
                "iam:GetRole",
                "iam:ListRoles",
                "lambda:CreateFunction",
                "lambda:ListFunctions",
                "lambda:ListEventSourceMappings",
                "lambda:CreateEventSourceMapping",
                "lambda:DeleteEventSourceMapping",
                "lambda:GetFunctionConfiguration",
                "lambda:DeleteFunction",
                "lambda:InvokeAsync",
                "lambda:InvokeFunction",
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:DescribeLogGroups",
                "logs:DescribeLogStreams",
                "logs:PutLogEvents",
                "logs:GetLogEvents",
                "logs:FilterLogEvents",
                "sns:CreateTopic",
                "sns:DeleteTopic",
                "sns:Publish",
                "sns:Subscribe",
                "sns:ListTopics",
                "sns:ListSubscriptionsByTopic",
                "sns:GetTopicAttributes",
                "sns:SetTopicAttributes"
              ],
              "Resource": "*"
            }]
          }
        }]
      }
    },

    "CustomerServiceRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "Customer service REST API",
        "Description": "Customer service REST API used for /customer* requests",
        "EndpointConfiguration": {
          "Types": ["REGIONAL"]
        },
        "FailOnWarnings": true
      }
    },

    "CustomerServiceRestApiGatewayAccount": {
      "Type": "AWS::ApiGateway::Account",
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "CustomerServiceRestApiGatewayRole",
            "Arn"
          ]
        }
      }
    },

    "CustomerServiceRestApiGatewayRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": ["apigateway.amazonaws.com"]
              },
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "Policies": [{
          "PolicyName": "CustomerServiceRestApiGatewayCloudWatchLogsPolicy",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "logs:*"
              ],
              "Resource": "arn:aws:logs:*:*:*"
            }]
          }
        }]
      }
    },

    "CustomerServiceRestApiStage": {
      "DependsOn": ["CustomerServiceRestApiGatewayAccount"],
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {
          "Ref": "CustomerServiceRestApiDeployment"
        },
        "MethodSettings": [{
          "ResourcePath": "/*"
        }],
        "RestApiId": {
          "Ref": "CustomerServiceRestApi"
        },
        "StageName": "api"
      }
    },

    "CustomerServiceRestApiDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {"Ref": "CustomerServiceRestApi"},
        "StageName": "default"
      },
      "DependsOn": ["CustomerGetMethod", "CustomersGetMethod", "CustomerPostMethod"]
    },

    "CustomerModel": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "ContentType": "application/json",
        "Name": "Customer",
        "RestApiId": {"Ref": "CustomerServiceRestApi"},
        "Schema": {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "title": "Customer",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "string"
            },
            "firstName": {
              "type": "string"
            },
            "lastName": {
              "type": "string"
            },
            "address": {
              "type": "string"
            },
            "email": {
              "type": "string"
            }
          },
          "required": ["id", "firstName", "lastName", "address", "email"]
        }
      }
    },

    "CustomersModel": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "ContentType": "application/json",
        "Name": "Customers",
        "RestApiId": {"Ref": "CustomerServiceRestApi"},
        "Schema": {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "title": "Customers",
          "type": "array",
          "items": {
            "$ref": {"Fn::Join": ["", ["https://apigateway.amazonaws.com/restapis/", {"Ref": "CustomerServiceRestApi"}, "/models/", {"Ref": "CustomerModel"}]]}
          }
        }
      }
    },

    "CreateCustomerModel": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "ContentType": "application/json",
        "Name": "CreateCustomer",
        "RestApiId": {"Ref": "CustomerServiceRestApi"},
        "Schema": {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "title": "CreateCustomer",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "firstName": {
              "type": "string"
            },
            "lastName": {
              "type": "string"
            },
            "address": {
              "type": "string"
            },
            "email": {
              "type": "string"
            }
          },
          "required": ["firstName", "lastName", "address", "email"]
        }
      }
    },

    "CustomersRestResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {"Ref": "CustomerServiceRestApi"},
        "ParentId": {"Fn::GetAtt": ["CustomerServiceRestApi", "RootResourceId"]},
        "PathPart": "customer"
      }
    },

    "CustomersGetMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {"Ref": "CustomerServiceRestApi"},
        "ResourceId": {"Ref": "CustomersRestResource"},
        "HttpMethod": "GET",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {"Fn::Join" : ["", ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["GetCustomersLambda", "Arn"]}, "/invocations"]]},
          "IntegrationResponses": [{
            "StatusCode": 200
          }]
        },
        "RequestModels": {
          "application/json": "Empty"
        },
        "MethodResponses": [{
          "ResponseModels": {
            "application/json": {"Ref": "CustomersModel"}
          },
          "StatusCode": 200
        }]
      }
    },

    "CustomerPostMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {"Ref": "CustomerServiceRestApi"},
        "ResourceId": {"Ref": "CustomersRestResource"},
        "HttpMethod": "POST",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {"Fn::Join" : ["", ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["PostCustomerLambda", "Arn"]}, "/invocations"]]},
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.X-Resource-Id": "integration.response.body.id"
              },
              "StatusCode": 201
            },
            {
              "SelectionPattern": "^.*Exception.*$",
              "ResponseTemplates": {
                "application/json": "{\"message\":\"Oops, something went wrong when processing your request. Try later\"}"
              },
              "StatusCode": 400
            }
          ]
        },
        "RequestModels": {
          "application/json": {"Ref": "CreateCustomerModel"}
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": {"Ref": "CustomerModel"}
            },
            "ResponseParameters": {
              "method.response.header.X-Resource-Id": true
            },
            "StatusCode": 201
          },
          {
            "ResponseModels": {
              "application/json": "Error"
            },
            "StatusCode": 400
          }
        ]
      }
    },

    "CustomerRestResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {"Ref": "CustomerServiceRestApi"},
        "ParentId": {"Ref": "CustomersRestResource"},
        "PathPart": "{customerId}"
      }
    },

    "CustomerGetMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {"Ref": "CustomerServiceRestApi"},
        "ResourceId": {"Ref": "CustomerRestResource"},
        "HttpMethod": "GET",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {"Fn::Join" : ["", ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["GetCustomerLambda", "Arn"]}, "/invocations"]]},
          "IntegrationResponses": [
            {
              "StatusCode": 200
            },
            {
              "SelectionPattern": "^.*Exception.*$",
              "ResponseTemplates": {
                "application/json": "Empty"
              },
              "StatusCode": 404
            }
          ],
          "RequestTemplates": {
            "application/json": "{\"id\": \"$input.params('customerId')\"}"
          }
        },
        "RequestParameters": {
          "method.request.path.customerId": true
        },
        "RequestModels": {
          "application/json": "Empty"
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": {"Ref": "CustomerModel"}
            },
            "StatusCode": 200
          },
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "StatusCode": 404
          }
        ]
      }
    }
  },

  "Outputs": {
    "RootUrl": {
      "Description": "Root URL of the Customer service API gateway",
      "Value": {"Fn::Join": ["", ["https://", {"Ref": "CustomerServiceRestApi"}, ".execute-api.", {"Ref": "AWS::Region"}, ".amazonaws.com/", {"Ref": "CustomerServiceRestApiStage"}]]}
    }
  }
}
